#include <QCoreApplication>
#include "json.hpp"
#include <iostream>
#include "../../IXWebSocket/ixwebsocket/IXWebSocketServer.h"
#include "../../IXWebSocket/ixwebsocket/IXWebSocket.h"
#include "../../IXWebSocket/ixwebsocket/IXConnectionState.h"
#include "usuario.h"
#include "servidor.h"
#include <QString>
#include <QJsonDocument>
#include <QJsonValue>
#include <QJsonObject>
#include <QJsonArray>
using JSON = nlohmann::json;


///TAREAS:
/// 1. CREAR LA BD CON LAS TABLAS Y CAMPOS PERTINENTES:   X
///     USUARIOS: ID, NOMBRE, CONTRASEÑA CIFRADA DE ALGUNA MANERA.
///     ENTRADAS: ID, ID_SECCION, ID_USUARIO, CONTENIDO.
///     SECCIÓN: ID, NOMBRE.
/// 2. CREAR LAS CLASES EN QT QUE SE CORRESPONDAN CON LA BD (PROPIEDADES = CAMPOS).   X
/// 3. CREAR LA PROGRAMACIÓN PARA PODER EMPLEAR LA BD DESDE EL SERVIDOR.
/// 4. CREAR EL DISEÑO TANTO DEL CLIENTE COMO DEL BACKEND.
/// 5. CREAR LA PROGRAMACIÓN PARA COMUNICAR EL CLIENTE Y EL SERVIDOR.
/// 6. CREAR LA PROGRAMACIÓN PARA COMUNICAR EL BACKEND Y EL SERVIDOR.
/// 7. DOCUMENTAR EL PROYECTO (DOXYGEN).
/// * EL PROGRAMA DEBE TENER SOPORTE PARA TRADUCCIONES (NO SIGNIFICA QUE ESTÉ TRADUCIDO,
/// SINO QUE SE PUEDA TRADUCIR, QUE EL PROGRAMA ESTÉ PREPARADO PARA ELLO.).
/// * EL PROGRAMA DEBERÍA ESTAR CREADO DE MANERA MODULAR (ESTE MAIN QUEDARÁ CASI VACÍO,
/// HAY QUE CREAR LA CLASE "SERVIDOR" APARTE Y DEJAR LA PROGRAMACIÓN AHÍ).
/// *TRAS ACABAR, REVISAR TEMA DE REFACTORIZACIÓN; DEJAR BIEN EL CÓDIGO (VARIABLES GLOBALES,
/// DE MÓDULO, NÚMEROS MÁGICOS, CÓDIGO REDUNDANTE, CÓDIGO INEFICIENTE).
///

/// LOGIN:
///
/// FORMULARIO: USUARIO CONTRASEÑA -> SERVIDOR
/// USUARIO EXISTE?
/// SI EXISTE, CUÁL ES SU SALT? EL CÓDIGO DE LA PASSWORD
/// CODIFICA LA CONTRASEÑA CON LA SALT, TEXTO PLANO DE LA CONTRASEÑA + SALT PARA OBTENER LA PASSWORD CIFRADA
/// CONTRASEÑA + SALT = CONTRASEÑA CIFRADA EN LA BBDD?
/// SI ES IGUAL, ENTONCES...
/// TABLA EN OTRO SITIO DE TOKENS VÁLIDOS Y ASIGNAS EL ID_USUARIO + EL TOKEN + FECHA DE CADUCIDAD
/// ESTA TOKEN DURA X, QUE ES LO QUE TE PERMITIRÁ ENTRAR
/// TABLA DE TOKENS:
/// ID_USER, TOKEN, FECHA VALIDEZ
/// ENVIAR TOKEN AL USUARIO, A PARTIR DE AHORA ESE USUARIO PUEDE HACER FUNCIONES DE USUARIO VALIDADO
/// LAS FUNCIONES LO PRIMERO QUE HARÁN SERÁ VER SI EL TOKEN ES VÁLIDO (LA FECHA TAMBIÉN DEBE SER VÁLIDA)
/// SI ES ASÍ, EJECUTO LA FUNCIÓN
/// SI NO, DEVUELVE UN ERROR.
///
/// CON WEBSOCKET NO HACE FALTA HACER TODO, ESTO ES MÁS HTTP.
/// CON WEBSOCKET SE PUEDE GENERAR EL TOKEN PERO NO HACE FALTA QUE EL TOKEN SE MUEVA CADA VEZ QUE HACES ALGO
/// TIENES EL ID CONEXION DEL WEBSOCKET Y EL ID USUARIO
/// CREAS QHASH DE USUARIOS LOGEADOS CON IDENTIFICADOR DE CONEXION E ID USUARIO. (QHash <int, int>)
/// SE PUEDE SIMPLIFICAR... EN ESTE CASO. PRIMERO HACER SIN NADA DE ESTO
///
/// END_LOGIN



int main(int argc, char *argv[])
{
  Servidor *servidor;
  servidor->iniciarServidor();
}
